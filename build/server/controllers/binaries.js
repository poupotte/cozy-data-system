// Generated by CoffeeScript 1.10.0
var async, binaryManagement, db, dbHelper, downloader, log, multiparty;

multiparty = require('multiparty');

log = require('printit')({
  date: true,
  prefix: 'binaries'
});

db = require('../helpers/db_connect_helper').db_connect();

binaryManagement = require('../lib/binary');

dbHelper = require('../lib/db_remove_helper');

downloader = require('../lib/downloader');

async = require('async');

module.exports.add = function(req, res, next) {
  var fields, form, nofile;
  form = new multiparty.Form({
    autoFields: false,
    autoFiles: false
  });
  form.parse(req);
  nofile = true;
  fields = {};
  form.on('part', function(part) {
    var fileData, name;
    if (part.filename == null) {
      fields[part.name] = '';
      part.on('data', function(buffer) {
        return fields[part.name] = buffer.toString();
      });
      return part.resume();
    } else {
      nofile = false;
      if (fields.name != null) {
        name = fields.name;
      } else {
        name = part.filename;
      }
      fileData = {
        name: name,
        "content-type": part.headers['content-type']
      };
      return binaryManagement.addBinary(req.doc, fileData, part, function(err) {
        if (err) {
          log.error("" + (JSON.stringify(err)));
          return form.emit('error', err);
        } else {
          return res.status(201).send({
            success: true
          });
        }
      });
    }
  });
  form.on('progress', function(bytesReceived, bytesExpected) {});
  form.on('error', function(err) {
    return next(err);
  });
  return form.on('close', function() {
    if (nofile) {
      res.status(400).send({
        error: 'No file sent'
      });
    }
    return next();
  });
};

module.exports.get = function(req, res, next) {
  var binary, err, id, name, request;
  name = req.params.name;
  binary = req.doc.binary;
  if (binary && binary[name]) {
    id = binary[name].id;
    return request = downloader.download(id, name, function(err, stream) {
      if (err) {
        return next(err);
      } else {
        res.setHeader('Content-Length', stream.headers['content-length']);
        res.setHeader('Content-Type', stream.headers['content-type']);
        req.once('close', function() {
          return request.abort();
        });
        if (req.headers['range'] != null) {
          res.setHeader('range', req.headers['range']);
        }
        return stream.pipe(res);
      }
    });
  } else {
    err = new Error("not found");
    err.status = 404;
    return next(err);
  }
};

module.exports.remove = function(req, res, next) {
  var err, id, name;
  name = req.params.name;
  if (req.doc.binary && req.doc.binary[name]) {
    id = req.doc.binary[name].id;
    delete req.doc.binary[name];
    if (req.doc.binary.length === 0) {
      delete req.doc.binary;
    }
    return db.save(req.doc, function(err) {
      return db.view('binary/byDoc', {
        key: id
      }, function(err, result) {
        if (result.length !== 0) {
          res.status(204).send({
            success: true
          });
          return next();
        }
        return db.get(id, function(err, binary) {
          if (binary == null) {
            err = new Error('Binary not found');
            err.status = 404;
            return next(err);
          }
          return dbHelper.remove(binary, function(err) {
            if (err) {
              console.log("[Attachment] err: " + JSON.stringify(err));
              return next(err);
            } else {
              res.status(204).send({
                success: true
              });
              return next();
            }
          });
        });
      });
    });
  } else {
    err = new Error("no binary ID is provided");
    err.status = 400;
    return next(err);
  }
};

module.exports.convert = function(req, res, next) {
  var binaries, createBinary, id, keys, removeOldAttach;
  binaries = {};
  id = req.doc.id;
  removeOldAttach = function(attach, binaryId, callback) {
    return db.get(req.doc.id, function(err, doc) {
      if (err) {
        return callback(err);
      } else {
        return db.removeAttachment(doc, attach, function(err) {
          if (err) {
            return callback(err);
          } else {
            return db.get(binaryId, function(err, doc) {
              if (err) {
                return callback(err);
              } else {
                return callback(null, doc);
              }
            });
          }
        });
      }
    });
  };
  createBinary = function(attach, callback) {
    var binary;
    binary = {
      docType: "Binary"
    };
    return db.save(binary, function(err, binDoc) {
      var data, readStream, writeStream;
      readStream = db.getAttachment(req.doc.id, attach, function(err) {
        if (err) {
          return console.log(err);
        }
      });
      data = {
        name: attach,
        body: ''
      };
      writeStream = db.saveAttachment(binDoc, data, function(err, res) {
        if (err) {
          return callback(err);
        }
        return removeOldAttach(attach, binDoc._id, function(err, doc) {
          if (err) {
            return callback(err);
          } else {
            binaries[attach] = {
              id: doc._id,
              rev: doc._rev
            };
            return callback();
          }
        });
      });
      return readStream.pipe(writeStream);
    });
  };
  if (req.doc._attachments != null) {
    keys = Object.keys(req.doc._attachments);
    return async.eachSeries(keys, createBinary, function(err) {
      if (err) {
        return next(err);
      } else {
        return db.get(req.doc.id, function(err, doc) {
          doc.binary = binaries;
          return db.save(doc, function(err, doc) {
            if (err) {
              return next(err);
            } else {
              res.status(200).send({
                success: true
              });
              return next();
            }
          });
        });
      }
    });
  } else {
    res.status(200).send({
      success: true
    });
    return next();
  }
};
