// Generated by CoffeeScript 1.10.0
var User, checkBody, db, logger, nodemailer, sendEmail, transport, user;

nodemailer = require("nodemailer");

transport = require('nodemailer-smtp-transport');

logger = require('printit')({
  date: false,
  prefix: 'controllers:mails'
});

db = require('../helpers/db_connect_helper').db_connect();

User = require('../lib/user');

user = new User();

sendEmail = function(mailOptions, callback) {
  var transporter;
  transporter = nodemailer.createTransport(transport({
    tls: {
      rejectUnauthorized: false
    }
  }));
  return transporter.sendMail(mailOptions, function(error, response) {
    transporter.close();
    return callback(error, response);
  });
};

checkBody = function(body, attributes) {
  var attr, i, len, missingAttributes;
  missingAttributes = [];
  for (i = 0, len = attributes.length; i < len; i++) {
    attr = attributes[i];
    if (body[attr] == null) {
      missingAttributes.push(attr);
    }
  }
  return missingAttributes;
};

module.exports.send = function(req, res, next) {
  var attrs, body, err, mailOptions, missingAttributes;
  body = req.body;
  missingAttributes = checkBody(body, ['to', 'from', 'subject', 'content']);
  if (missingAttributes.length > 0) {
    attrs = missingAttributes.join(" ");
    err = new Error("Body has at least one missing attribute (" + attrs + ").");
    err.status = 400;
    return next(err);
  } else {
    mailOptions = {
      to: body.to,
      from: body.from,
      subject: body.subject,
      cc: body.cc,
      bcc: body.bcc,
      replyTo: body.replyTo,
      inReplyTo: body.inReplyTo,
      references: body.references,
      headers: body.headers,
      alternatives: body.alternatives,
      envelope: body.envelope,
      messageId: body.messageId,
      date: body.date,
      encoding: body.encoding,
      text: body.content,
      html: body.html || void 0
    };
    if (body.attachments != null) {
      mailOptions.attachments = body.attachments.map(function(attachment) {
        var content, newAttach;
        content = new Buffer(attachment.content.split(",")[1], 'base64');
        return newAttach = {
          filename: attachment.filename,
          content: content,
          contentType: attachment.contentType
        };
      });
    }
    return sendEmail(mailOptions, function(error, response) {
      if (error) {
        logger.info("[sendMail] Error : " + error);
        error.code = 'postfix_unavailable';
        error.status = 501;
        return next(error);
      } else {
        return res.send(200, response);
      }
    });
  }
};

module.exports.sendToUser = function(req, res, next) {
  var attrs, body, err, missingAttributes;
  body = req.body;
  missingAttributes = checkBody(body, ['from', 'subject', 'content']);
  if (missingAttributes.length > 0) {
    attrs = missingAttributes.join(" ");
    err = new Error("Body has at least one missing attribute (" + attrs + ").");
    err.status = 400;
    return next(err);
  } else {
    return user.getUser(function(err, user) {
      var mailOptions;
      if (err) {
        logger.info("[sendMailToUser] err: " + err);
        return next(err);
      } else {
        mailOptions = {
          to: user.email,
          from: body.from,
          subject: body.subject,
          text: body.content,
          html: body.html || void 0
        };
        if (body.attachments != null) {
          mailOptions.attachments = body.attachments;
        }
        return sendEmail(mailOptions, function(error, response) {
          if (error) {
            logger.info("[sendMail] Error : " + error);
            error.code = 'postfix_unavailable';
            error.status = 501;
            return next(error);
          } else {
            return res.send(200, response);
          }
        });
      }
    });
  }
};

module.exports.sendFromUser = function(req, res, next) {
  var attrs, body, err, missingAttributes;
  body = req.body;
  missingAttributes = checkBody(body, ['to', 'subject', 'content']);
  if (missingAttributes.length > 0) {
    attrs = missingAttributes.join(" ");
    err = new Error("Body has at least one missing attribute (" + attrs + ").");
    err.status = 400;
    return next(err);
  } else {
    return db.view('cozyinstance/all', function(err, instance) {
      return db.view('user/all', function(err, users) {
        var displayName, domain, mailOptions, publicName, ref, ref1, ref2, userEmail;
        if ((instance != null ? (ref = instance[0]) != null ? ref.value.domain : void 0 : void 0) != null) {
          domain = instance[0].value.domain;
          if (domain.indexOf('https://') !== -1) {
            domain = domain.substring(8, domain.length);
          }
          domain = domain.split(':')[0];
        } else {
          domain = 'your.cozy.io';
        }
        if (((users != null ? (ref1 = users[0]) != null ? ref1.value.public_name : void 0 : void 0) != null) && (users != null ? (ref2 = users[0]) != null ? ref2.value.public_name : void 0 : void 0) !== '') {
          publicName = users[0].value.public_name;
          displayName = publicName.toLowerCase().replace(/\W/g, '-');
          displayName += "-";
          userEmail = users[0].value.email;
        } else {
          displayName = '';
        }
        mailOptions = {
          to: body.to,
          from: publicName + " <" + displayName + "noreply@" + domain + ">",
          subject: body.subject,
          text: body.content,
          html: body.html || void 0
        };
        if (userEmail != null) {
          mailOptions.replyTo = userEmail;
        }
        if (body.attachments != null) {
          mailOptions.attachments = body.attachments;
        }
        return sendEmail(mailOptions, function(error, response) {
          if (error) {
            logger.info("[sendMail] Error : " + error);
            error.code = 'postfix_unavailable';
            error.status = 501;
            return next(error);
          } else {
            return res.send(200, response);
          }
        });
      });
    });
  }
};
