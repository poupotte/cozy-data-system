// Generated by CoffeeScript 1.9.3
var CryptoTools, User, cryptoTools, day, db, errors, fs, getBody, logger, masterKey, nodemailer, randomString, request, resetTimeout, sendEmail, sendMail, sendMailNow, slaveKey, timeout, updateKeys, user;

fs = require('fs');

db = require('../helpers/db_connect_helper').db_connect();

nodemailer = require("nodemailer");

CryptoTools = require('./crypto_tools');

randomString = require('./random').randomString;

logger = require('printit')({
  prefix: 'lib/encryption'
});

errors = require('../middlewares/errors');

request = require('./request');

timeout = null;

User = require('./user');

user = new User();

cryptoTools = new CryptoTools();

masterKey = null;

slaveKey = null;

day = 24 * 60 * 60 * 1000;

sendEmail = function(mailOptions, callback) {
  var transport;
  transport = nodemailer.createTransport("SMTP", {});
  return transport.sendMail(mailOptions, function(error, response) {
    transport.close();
    return callback(error, response);
  });
};

getBody = function(domain) {
  var body;
  body = "Hello,\n\nYour Cozy has been recently restarted.\nFor security reasons, a restart disables encryption and decryption.\nSome features of your applications are therefore desactivated.\nThey will be reactivated automatically when you will log into your Cozy instance.";
  if ((domain != null) && domain !== '') {
    body += "Click here to login " + domain + ".";
  }
  body += "\nCozy Team.\n\nP-S: If you have any question, let us know at contact@cozycloud.cc or in our IRC channel #cozycloud on freenode.net.\n";
  return body;
};

resetTimeout = function() {
  return timeout = null;
};

sendMailNow = function() {
  if ((masterKey != null) && (slaveKey != null)) {
    return resetTimeout();
  }
  return user.getUser(function(err, user) {
    if (err) {
      logger.error("[sendMailToUser] an error occured while" + " retrieving user data from database:");
      return logger.raw(err);
    } else {
      return request.viewAll('cozyinstance', function(err, instance) {
        var domain, mailOptions, ref;
        if ((instance != null ? (ref = instance[0]) != null ? ref.value.domain : void 0 : void 0) != null) {
          domain = instance[0].value.domain;
        } else {
          domain = false;
        }
        mailOptions = {
          to: user.email,
          from: "noreply@cozycloud.cc",
          subject: "Your Cozy has been restarted",
          text: getBody(domain)
        };
        sendEmail(mailOptions, function(error, response) {
          if (error != null) {
            return logger.error(error);
          }
        });
        return timeout = setTimeout(resetTimeout, 3 * day);
      });
    }
  });
};

sendMail = function() {
  if (timeout === null) {
    return timeout = setTimeout(sendMailNow, 1 * day);
  }
};

updateKeys = function(oldKey, password, encryptedslaveKey, callback) {
  var data, encryptedSlaveKey, salt;
  salt = cryptoTools.genSalt(32 - password.length);
  masterKey = cryptoTools.genHashWithSalt(password, salt);
  encryptedSlaveKey = cryptoTools.encrypt(masterKey, slaveKey);
  data = {
    slaveKey: encryptedSlaveKey,
    salt: salt
  };
  return callback(data);
};

exports.encrypt = function(password) {
  var err, newPwd;
  if ((password != null) && process.env.NODE_ENV !== "development") {
    if ((masterKey != null) && (slaveKey != null)) {
      newPwd = cryptoTools.encrypt(slaveKey, password);
      return newPwd;
    } else {
      sendMail();
      err = new Error("master key and slave key don't exist");
      logger.error(err.message);
      throw err;
    }
  } else {
    return password;
  }
};

exports.get = function() {
  return masterKey;
};

exports.decrypt = function(password) {
  var err, newPwd;
  if ((password != null) && process.env.NODE_ENV !== "development") {
    if ((masterKey != null) && (slaveKey != null)) {
      newPwd = password;
      try {
        newPwd = cryptoTools.decrypt(slaveKey, password);
      } catch (_error) {}
      return newPwd;
    } else {
      sendMail();
      err = "master key and slave key don't exist";
      logger.error("[decrypt]: " + err);
      throw err;
    }
  } else {
    return password;
  }
};

exports.init = function(password, user, callback) {
  var data, encryptedSlaveKey, salt;
  salt = cryptoTools.genSalt(32 - password.length);
  masterKey = cryptoTools.genHashWithSalt(password, salt);
  slaveKey = randomString();
  encryptedSlaveKey = cryptoTools.encrypt(masterKey, slaveKey);
  data = {
    salt: salt,
    slaveKey: encryptedSlaveKey
  };
  return db.merge(user._id, data, (function(_this) {
    return function(err, res) {
      if (err) {
        logger.error("[initializeKeys] err: " + err);
        return callback(err);
      } else {
        return callback(null);
      }
    };
  })(this));
};

exports.logIn = function(password, user, callback) {
  var encryptedSlaveKey;
  masterKey = cryptoTools.genHashWithSalt(password, user.salt);
  encryptedSlaveKey = user.slaveKey;
  slaveKey = cryptoTools.decrypt(masterKey, encryptedSlaveKey);
  return callback();
};

exports.update = function(password, user, callback) {
  var err;
  if (!((masterKey != null) && (slaveKey != null))) {
    err = errors.http(400, "masterKey and slaveKey don't exist");
    logger.error("[update] : " + err);
    return callback(err);
  }
  if (masterKey.length !== 32) {
    err = errors.http(400, "password to initialize keys is different than user password");
    logger.error("[update] : " + err);
    return callback(err);
  }
  return updateKeys(masterKey, password, slaveKey, (function(_this) {
    return function(data) {
      return db.merge(user._id, data, function(err, res) {
        if (err) {
          logger.error("[update] : " + err);
          return callback(err);
        }
        return callback(null);
      });
    };
  })(this));
};

exports.reset = function(user, callback) {
  var data;
  data = {
    slaveKey: null,
    salt: null
  };
  return db.merge(user._id, data, (function(_this) {
    return function(err, res) {
      if (err) {
        return callback(new Error("[resetKeys] err: " + err));
      } else {
        return callback();
      }
    };
  })(this));
};

exports.isLog = function() {
  return (slaveKey != null) && (masterKey != null);
};
