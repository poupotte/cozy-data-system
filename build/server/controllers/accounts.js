// Generated by CoffeeScript 1.8.0
var Account, Client, CryptoTools, User, accountManager, checkProxyHome, correctWitness, cryptoTools, db, encryption, initPassword, randomString, user;

db = require('../helpers/db_connect_helper').db_connect();

encryption = require('../lib/encryption');

Client = require("request-json").JsonClient;

Account = require('../lib/account');

CryptoTools = require('../lib/crypto_tools');

User = require('../lib/user');

randomString = require('../lib/random').randomString;

checkProxyHome = require('../lib/token').checkProxyHome;

initPassword = require('../lib/init').initPassword;

accountManager = new Account();

cryptoTools = new CryptoTools();

user = new User();

correctWitness = "Encryption is correct";

module.exports.checkPermissions = function(req, res, next) {
  return checkProxyHome(req.header('authorization'), function(err, isAuthorized) {
    if (!isAuthorized) {
      err = new Error("Application is not authorized");
      err.status = 403;
      return next(err);
    } else {
      return next();
    }
  });
};

module.exports.initializeKeys = function(req, res, next) {
  var err;
  if (req.body.password != null) {
    return user.getUser(function(err, user) {
      if (err) {
        console.log("[initializeKeys] err: " + err);
        return next(new Error(err));
      } else {
        if ((user.salt != null) && (user.slaveKey != null)) {
          return encryption.logIn(req.body.password, user, function(err) {
            if (err != null) {
              next(new Error(err));
            }
            return initPassword(function() {
              return res.send(200, {
                success: true
              });
            });
          });
        } else {
          return encryption.init(req.body.password, user, function(err) {
            if (err) {
              return next(new Error(err));
            } else {
              return res.send(200, {
                success: true
              });
            }
          });
        }
      }
    });
  } else {
    err = new Error("No password field in request's body");
    err.status = 400;
    return next(err);
  }
};

module.exports.updateKeys = function(req, res, next) {
  var err;
  if (req.body.password != null) {
    return user.getUser(function(err, user) {
      if (err) {
        console.log("[updateKeys] err: " + err);
        return next(new Error(err));
      } else {
        return encryption.update(req.body.password, user, function(err) {
          if ((err != null) && err === 400) {
            err = new Error("No master or slave keys");
            err.status = 400;
            return next(err);
          } else if (err) {
            return next(new Error(err));
          } else {
            return res.send(200, {
              success: true
            });
          }
        });
      }
    });
  } else {
    err = new Error("No password field in request's body");
    return err.status = 400..next(err);
  }
};

module.exports.resetKeys = function(req, res, next) {
  return user.getUser(function(err, user) {
    if (err) {
      console.log("[initializeKeys] err: " + err);
      return next(new Error(err));
    } else {
      return encryption.reset(user, function(err) {
        if (err) {
          return next(new Error(err));
        } else {
          return res.send(204, {
            success: true
          });
        }
      });
    }
  });
};

module.exports.deleteKeys = function(req, res) {
  return res.send(204, {
    sucess: true
  });
};
