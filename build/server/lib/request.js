// Generated by CoffeeScript 1.9.3
var appIsInstalled, async, db, initializeDSView, isSimilare, log, productionOrTest, randomString, recoverApp, recoverDesignDocs, recoverDocs, removeOldView, request, viewAll,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

db = require('../helpers/db_connect_helper').db_connect();

async = require('async');

request = {};

log = require('printit')({
  date: true,
  prefix: 'lib/request'
});

randomString = function(length) {
  var string;
  string = "";
  while (string.length < length) {
    string = string + Math.random().toString(36).substr(2);
  }
  return string.substr(0, length);
};

productionOrTest = process.env.NODE_ENV === "production" || process.env.NODE_ENV === "test";

module.exports.viewAll = viewAll = function(docType, cb) {
  var options;
  options = {
    startkey: docType,
    endkey: docType,
    include_docs: true,
    reduce: false
  };
  return db.view('all/bydoctype', options, cb);
};

module.exports.create = (function(_this) {
  return function(app, req, views, newView, callback) {
    var storeRam;
    storeRam = function(path) {
      if (request[app] == null) {
        request[app] = {};
      }
      request[app][req.type + "/" + req.req_name] = path;
      return callback(null, path);
    };
    if (productionOrTest) {
      if (((views != null ? views[req.req_name] : void 0) != null) && JSON.stringify(views[req.req_name]) !== JSON.stringify(newView)) {
        return storeRam(app + "-" + req.req_name);
      } else {
        if ((views != null ? views[app + "-" + req.req_name] : void 0) != null) {
          delete views[app + "-" + req.req_name];
          return db.merge("_design/" + req.type, {
            views: views
          }, function(err, response) {
            if (err) {
              log.error("[Definition] err: " + err.message);
            }
            return storeRam(req.req_name);
          });
        } else {
          return storeRam(req.req_name);
        }
      }
    } else {
      return callback(null, req.req_name);
    }
  };
})(this);

module.exports.get = (function(_this) {
  return function(app, req, callback) {
    var ref;
    if (req.req_name === 'all') {
      return callback("byDocType");
    } else if (productionOrTest) {
      if (((ref = request[app]) != null ? ref[req.type + "/" + req.req_name] : void 0) != null) {
        return callback(request[app][req.type + "/" + req.req_name]);
      } else {
        return callback("" + req.req_name);
      }
    } else {
      return callback("" + req.req_name);
    }
  };
})(this);

recoverApp = (function(_this) {
  return function(callback) {
    var apps;
    apps = [];
    return viewAll('application', function(err, res) {
      if (err) {
        return callback(err);
      } else if (!res) {
        return callback(null, []);
      } else {
        res.forEach(function(app) {
          return apps.push(app.name);
        });
        return callback(null, apps);
      }
    });
  };
})(this);

recoverDocs = (function(_this) {
  return function(res, docs, callback) {
    var doc;
    if (res && res.length !== 0) {
      doc = res.pop();
      return db.get(doc.id, function(err, result) {
        docs.push(result);
        return recoverDocs(res, docs, callback);
      });
    } else {
      return callback(null, docs);
    }
  };
})(this);

recoverDesignDocs = (function(_this) {
  return function(callback) {
    var filterRange;
    filterRange = {
      startkey: "_design/",
      endkey: "_design0"
    };
    return db.all(filterRange, function(err, res) {
      if (err != null) {
        return callback(err);
      }
      return recoverDocs(res, [], callback);
    });
  };
})(this);

initializeDSView = function(callback) {
  var views;
  views = {
    all: {
      bydoctype: {
        map: "function(doc) {\n    if(doc.docType) {\n        return emit(doc.docType.toLowerCase(), doc._id)\n    }\n}",
        reduce: "function(key, values) {\n    return true;\n}"
      },
      withoutdoctype: {
        map: "function(doc) {\n    if (!doc.docType) {\n        return emit(doc._id, doc);\n    }\n}"
      }
    },
    device: {
      bylogin: {
        map: "function (doc) {\n    if(doc.docType && doc.docType.toLowerCase() === \"device\") {\n        return emit(doc.login, doc)\n    }\n}"
      }
    },
    application: {
      byslug: {
        map: "function(doc) {\n    if(doc.docType && doc.docType.toLowerCase() === \"application\") {\n        return emit(doc.slug, doc);\n    }\n}"
      }
    },
    access: {
      byapp: {
        map: "function(doc) {\n    if(doc.docType && doc.docType.toLowerCase() === \"access\") {\n        return emit(doc.app, doc);\n    }\n}"
      }
    },
    binary: {
      bydoc: {
        map: "function(doc) {\n    if(doc.binary) {\n        for (bin in doc.binary) {\n            emit(doc.binary[bin].id, doc._id);\n        }\n    }\n}"
      }
    },
    file: {
      withoutthumb: {
        map: "function(doc) {\n    if(doc.docType && doc.docType.toLowerCase() === \"file\") {\n        if(doc.class === \"image\" && doc.binary && doc.binary.file && !doc.binary.thumb) {\n            emit(doc._id, null);\n        }\n    }\n}"
      }
    },
    tags: {
      list: {
        map: "function (doc) {\nvar _ref;\nreturn (_ref = doc.tags) != null ? typeof _ref.forEach === \"function\" ? _ref.forEach(function(tag) {\n   return emit(tag, null);\n    }) : void 0 : void 0;\n}",
        reduce: "function(key, values) {\n    return true;\n}"
      }
    }
  };
  return async.forEach(Object.keys(views), function(docType, cb) {
    var view;
    view = views[docType];
    return db.get("_design/" + docType, function(err, doc) {
      var i, len, ref, type;
      if (err && err.error === 'not_found') {
        return db.save("_design/" + docType, view, cb);
      } else if (err) {
        log.error(err);
        return cb();
      } else {
        ref = Object.keys(view);
        for (i = 0, len = ref.length; i < len; i++) {
          type = ref[i];
          doc.views[type] = view[type];
        }
        return db.save("_design/" + docType, doc, cb);
      }
    });
  }, callback);
};

module.exports.init = (function(_this) {
  return function(callback) {
    var removeEmptyView, storeAppView;
    removeEmptyView = function(doc, callback) {
      if (Object.keys(doc.views).length === 0 || ((doc != null ? doc.views : void 0) == null)) {
        return db.remove(doc._id, doc._rev, function(err, response) {
          if (err) {
            log.error("[Definition] err: " + err.message);
          }
          return callback(err);
        });
      } else {
        return callback();
      }
    };
    storeAppView = function(apps, doc, view, body, callback) {
      var app, ref, req_name, type;
      if (view.indexOf('-') !== -1) {
        if (ref = view.split('-')[0], indexOf.call(apps, ref) >= 0) {
          app = view.split('-')[0];
          type = doc._id.substr(8, doc._id.length - 1);
          req_name = view.split('-')[1];
          if (!request[app]) {
            request[app] = {};
          }
          request[app][type + "/" + req_name] = view;
          return callback();
        } else {
          delete doc.views[view];
          return db.merge(doc._id, {
            views: doc.views
          }, function(err, response) {
            if (err) {
              log.error("[Definition] err: " + err.message);
            }
            return removeEmptyView(doc, function(err) {
              if (err != null) {
                log.error(err);
              }
              return callback();
            });
          });
        }
      } else {
        return callback();
      }
    };
    return initializeDSView(function() {
      if (productionOrTest) {
        return recoverApp((function(_this) {
          return function(err, apps) {
            if (err != null) {
              return callback(err);
            }
            return recoverDesignDocs(function(err, docs) {
              if (err != null) {
                return callback(err);
              }
              return async.forEach(docs, function(doc, cb) {
                return async.forEach(Object.keys(doc.views), function(view, cb) {
                  var body;
                  body = doc.views[view];
                  return storeAppView(apps, doc, view, body, cb);
                }, function(err) {
                  return removeEmptyView(doc, function(err) {
                    if (err != null) {
                      log.error(err);
                    }
                    return cb();
                  });
                });
              }, function(err) {
                if (err != null) {
                  log.error(err);
                }
                return callback();
              });
            });
          };
        })(this));
      } else {
        return callback(null);
      }
    });
  };
})(this);

removeOldView = function(designDoc, view) {
  delete designDoc.views[view];
  if (Object.keys(designDoc.views).length === 0) {
    return db.remove(designDoc._id, designDoc._rev, callback);
  } else {
    return db.merge(designDoc._id, {
      views: designDoc.views
    }, callback);
  }
};

isSimilare = function(sharedView, appView) {
  var warning;
  warning = 2;
  if (appView.indexOf('filter' !== -1)) {
    appView = appView.replace('filter = function (doc) {\n', '');
    appView = appView.replace('};\n    filter(doc);\n', '');
  }
  if (sharedView.indexOf('filter(doc)' !== -1)) {
    sharedView = sharedView.replace('filter = function (doc) {\n', '');
    sharedView = sharedView.replace('};\n    filter(doc);\n', '');
  }
  appView = appView.replace(/\ /g, '');
  appView = appView.replace(/\n/g, '');
  sharedView = sharedView.replace(/\ /g, '');
  sharedView = sharedView.replace(/\n/g, '');
  if (sharedView.indexOf('doc.docType&&') !== -1) {
    sharedView = sharedView.replace('doc.docType&&', '');
    warning = 1;
  }
  if (appView.indexOf('doc.docType&&') !== -1) {
    appView = appView.replace('doc.docType&&', '');
    warning = 2;
  }
  if (sharedView.indexOf('_') !== -1) {
    sharedView = sharedView.replace(/_/g, '');
  }
  if (appView.indexOf('_') !== -1) {
    appView = appView.replace(/_/g, '');
  }
  if (sharedView.indexOf('.toLowerCase') !== -1) {
    sharedView = sharedView.replace('.toLowerCase()', '').toLowerCase();
    appView = appView.toLowerCase();
    warning = 1;
  }
  if (appView.indexOf('.toLowerCase') !== -1) {
    appView = appView.replace('.toLowerCase()', '').toLowerCase();
    sharedView = sharedView.toLowerCase();
    warning = 2;
  }
  if (sharedView.toString() === appView.toString()) {
    return [true, warning];
  } else {
    return [false, null];
  }
};

exports.removeOldViews = function(callback) {
  var count, total;
  count = 0;
  total = 0;
  return viewAll('application', function(err, docs) {
    var apps;
    if (err) {
      return callback(err);
    }
    apps = docs.map(function(app) {
      return app.slug;
    });
    return db.all({
      startkey: "_design",
      endkey: "_design0",
      include_docs: true
    }, function(err, designDocs) {
      return async.forEachSeries(designDocs, (function(_this) {
        return function(designDoc, next) {
          designDoc = designDoc.doc;
          console.log('\n', designDoc._id);
          return async.forEachSeries(Object.keys(designDoc.views), function(type, cb) {
            var appView, ref, sharedView;
            total += 1;
            console.log(' ->', type);
            if (type === 'all' || type === 'dball') {
              removeOldView(designDoc, type, function() {
                console.log('  -> REMOVE (all views)');
                return count += 1;
              });
            } else if (type.indexOf('-') !== -1) {
              console.log('  -> specific view for application');
              if (ref = type.split('-')[0], indexOf.call(apps, ref) >= 0) {
                if (type.split('-')[1] === 'all') {
                  console.log('  -> REMOVE (all views)');
                  count += 1;
                } else {
                  console.log('  -> check similarity with other');
                  sharedView = designDoc.views[type.split('-')[1]].map.toString();
                  appView = designDoc.views[type].map.toString();
                  if (appView.indexOf('filter' !== -1)) {
                    appView = appView.replace('filter = function (doc) {\n', '');
                    appView = appView.replace('};\n    filter(doc);\n', '');
                  }
                  if (sharedView.indexOf('filter(doc)' !== -1)) {
                    sharedView = sharedView.replace('filter = function (doc) {\n', '');
                    sharedView = sharedView.replace('};\n    filter(doc);\n', '');
                  }
                  appView = appView.replace(/\ /g, '');
                  appView = appView.replace(/\n/g, '');
                  sharedView = sharedView.replace(/\ /g, '');
                  sharedView = sharedView.replace(/\n/g, '');
                  if (sharedView.indexOf('doc.docType&&') !== -1 || appView.indexOf('doc.docType&&') !== -1) {
                    sharedView = sharedView.replace('doc.docType&&', '');
                    appView = appView.replace('doc.docType&&', '');
                    console.log('Warning : docType check');
                  }
                  if (sharedView.indexOf('_') !== -1 || appView.indexOf('_') !== -1) {
                    sharedView = sharedView.replace(/_/g, '');
                    appView = appView.replace(/_/g, '');
                    console.log('Warning : ___');
                  }
                  if (sharedView.indexOf('.toLowerCase') !== -1 || appView.indexOf('.toLowerCase') !== -1) {
                    sharedView = sharedView.replace('.toLowerCase()', '').toLowerCase();
                    appView = appView.replace('.toLowerCase()', '').toLowerCase();
                    console.log('Warning : docType toLowerCase');
                  }
                  if (sharedView.toString() === appView.toString()) {
                    count += 1;
                    console.log('  -> REMOVE (same view)');
                  } else {
                    console.log('  ->  ', sharedView);
                    console.log('  ->  ', appView);
                    console.log('  -> ????');
                  }
                }
              } else {
                console.log('remove : old application');
                count += 1;
              }
            } else {
              console.log('   -> OK');
            }
            return cb();
          }, next);
        };
      })(this), function() {
        console.log('END');
        return console.log(count + "/" + total);
      });
    });
  });
};

appIsInstalled = function(currentApps, apps, count) {
  var app;
  if (count == null) {
    count = 0;
  }
  if (currentApps.length > count) {
    app = currentApps[count];
    if (indexOf.call(apps, app) >= 0) {
      return true;
    } else {
      return appIsInstalled(currentApps, apps, count + 1);
    }
  } else {
    return false;
  }
};

exports.removeOldAppViews = function(callback) {
  var all, count, count_similare, duplicateInstalled, duplicateUninstalled, filter, keep_app, lowerCase, mount, remove, toRemove, total, views;
  count = 0;
  total = 0;
  all = 0;
  remove = 0;
  duplicateUninstalled = 0;
  count_similare = 0;
  duplicateInstalled = 0;
  toRemove = 0;
  mount = 0;
  filter = 0;
  keep_app = 0;
  lowerCase = 0;
  views = require('./viewsApp').views;
  return viewAll('application', function(err, docs) {
    var apps;
    if (err) {
      return callback(err);
    }
    apps = docs.map(function(app) {
      return app.slug;
    });
    apps.push("home");
    apps.push("ds");
    return db.all({
      startkey: "_design",
      endkey: "_design0",
      include_docs: true
    }, function(err, designDocs) {
      return async.forEachSeries(designDocs, (function(_this) {
        return function(designDoc, next) {
          designDoc = designDoc.doc;
          return async.forEachSeries(Object.keys(designDoc.views), function(type, cb) {
            var appView, docType, ref, ref1, ref2, sharedView, similare, warning;
            total += 1;
            docType = designDoc._id.replace('_design/', '');
            if (((ref = views[docType]) != null ? ref[type] : void 0) != null) {
              if (!appIsInstalled(views[docType][type], apps)) {
                remove += 1;
                toRemove += 1;
                mount += 1;
              }
            } else {
              if (type === 'all' || type === 'dball') {
                all += 1;
                toRemove += 1;
                mount += 1;
              } else if (type === 'filterView') {
                filter += 1;
                toRemove += 1;
                mount += 1;
              } else {
                if (type.split('-').length > 1) {
                  if (type.split('-')[1] === 'all') {
                    all += 1;
                    toRemove += 1;
                    mount += 1;
                  } else {
                    if (appIsInstalled([type.split('-')[0]], apps)) {
                      duplicateInstalled += 1;
                      sharedView = designDoc.views[type.split('-')[1]].map.toString();
                      appView = designDoc.views[type].map.toString();
                      ref1 = isSimilare(sharedView, appView), similare = ref1[0], warning = ref1[1];
                      if (similare) {
                        count_similare += 1;
                        toRemove += 1;
                        mount += 1;
                      } else {
                        if (((ref2 = views[docType]) != null ? ref2[type.split('-')[1]] : void 0) != null) {
                          if (views[docType][type.split('-')[1]].length === 1) {
                            keep_app += 1;
                            toRemove += 1;
                            mount += 1;
                          }
                        }
                      }
                    } else {
                      duplicateUninstalled += 1;
                      toRemove += 1;
                      mount += 1;
                    }
                  }
                } else {
                  if (type.toLowerCase() !== type) {
                    lowerCase += 1;
                    toRemove += 1;
                    mount += 1;
                  } else {
                    console.log(docType, type);
                    count += 1;
                    mount += 1;
                  }
                }
              }
            }
            return cb();
          }, next);
        };
      })(this), function() {
        console.log(apps);
        console.log('END');
        console.log('all/dball: ', all);
        console.log('filter: ', filter);
        console.log('duplicateUninstalled: ', duplicateUninstalled);
        console.log('duplicateInstalled: ', duplicateInstalled);
        console.log('duplicate not shared: ', keep_app);
        console.log('similare', count_similare);
        console.log('oldApp: ', remove);
        console.log('lowerCase', lowerCase);
        console.log('unknown: ', count);
        console.log("to remove: (all + duplicateUninstalled + not_shared + similar + oldApp + lowerCase) ", toRemove);
        console.log("to remove with unknown: ", mount);
        return console.log("total: ", total);
      });
    });
  });
};
