// Generated by CoffeeScript 1.10.0
var checkDocType, checkDocTypeSync, feed, fs;

fs = require('fs');

feed = require('../lib/feed');

checkDocType = require('../lib/token').checkDocType;

checkDocTypeSync = require('../lib/token').checkDocTypeSync;

module.exports.deleteFiles = function(files) {
  var file, key, results;
  if ((files != null) && Object.keys(files).length > 0) {
    results = [];
    for (key in files) {
      file = files[key];
      results.push(fs.unlinkSync(file.path));
    }
    return results;
  }
};

module.exports.checkPermissions = function(req, permission, next) {
  var authHeader;
  authHeader = req.header('authorization');
  return checkDocType(authHeader, permission, function(err, appName, isAuthorized) {
    if (!appName) {
      err = new Error("Application is not authenticated");
      err.status = 401;
      return next(err);
    } else if (!isAuthorized) {
      err = new Error("Application is not authorized");
      err.status = 403;
      return next(err);
    } else {
      feed.publish('usage.application', appName);
      req.appName = appName;
      return next();
    }
  });
};

module.exports.checkPermissionsSync = function(req, permission) {
  var appName, authHeader, err, isAuthorized, ref;
  authHeader = req.header('authorization');
  ref = checkDocTypeSync(authHeader, permission), err = ref[0], appName = ref[1], isAuthorized = ref[2];
  if (!appName) {
    err = new Error("Application is not authenticated");
    err.status = 401;
    return err;
  } else if (!isAuthorized) {
    err = new Error("Application is not authorized");
    err.status = 403;
    return err;
  } else {
    feed.publish('usage.application', appName);
    req.appName = appName;
  }
};
